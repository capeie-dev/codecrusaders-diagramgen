[["0",{"pageContent":"Amazon Simple Storage Service (S3) is a cloud object storage service offered by Amazon Web Services (AWS). It allows users to store and retrieve any amount of data. S3 provides scalable, durable, and secure storage for various use cases, including storing data for Internet applications, backups, disaster recovery, and data lakes. [1, 2, 3, 4, 5]  \nKey features of Amazon S3: [6, 7]  \n\n• Object Storage: Data is stored as objects within S3 buckets. [2, 8]  \n• Scalability and Durability: S3 can handle virtually any amount of data and is designed for high durability. [3, 5]  \n• Storage Classes: Offers different storage classes (e.g., S3 Standard, S3 Intelligent-Tiering, S3 Glacier) to optimize storage costs and performance for various use cases. [6, 9, 10]  \n• Access Control: Provides robust access management options, including IAM (AWS Identity and Access Management), bucket policies, and S3 Access Grants, to control who can access and modify S3 resources. [11]  \n• Security Features: Offers encryption (both server-side and client-side), VPC endpoints, and security groups to protect data. [12]  \n• Integration with other AWS services: S3 integrates seamlessly with other AWS services, such as Amazon EC2, AWS Lambda, and Amazon SQS, to create robust and scalable solutions. [5, 13, 14, 15, 16]  \n\nUse cases of Amazon S3: [17, 18]  \n\n• Storing data for Internet applications: Web applications, mobile applications, and APIs can use S3 to store static content, user data, and application logs. [1, 13, 19, 20, 21, 22, 23]  \n• Backups and disaster recovery: S3 can be used as a central repository for backups and disaster recovery, providing a secure and reliable way to store data. [1, 20]  \n• Data lakes: S3 is an excellent choice for storing large amounts of raw and structured data for analytics and data warehousing. [5, 20]  \n• Content distribution: S3 can be used to host static content and deliver it to users globally through services like AWS CloudFront. [1, 6, 24, 25, 26]  \n• Archival storage: S3 Glacier and S3 Glacier Deep Archive are optimized for archival storage and long-term data retention. [9, 10]  \n\n","metadata":{"filename":"AWS S3.html"}}],["1",{"pageContent":"Amazon DocumentDB is a fully managed, scalable, and highly available NoSQL document database service on Amazon Web Services. It supports MongoDB workloads and offers a MongoDB-compatible API for storing, querying, and indexing JSON data. [1]  \nHere's a more detailed look at Amazon DocumentDB: \nKey Features: \n\n• MongoDB Compatibility: Amazon DocumentDB provides a MongoDB-compatible API, allowing developers to use existing MongoDB drivers, applications, and tools. [1, 2, 3, 4, 5]  \n• Scalability and High Availability: It offers elastic clusters that can scale to handle millions of read/write operations per second and petabytes of storage. [1, 2, 6, 7, 8]  \n• Fully Managed: AWS manages the underlying hardware, operating system, and database software, reducing operational overhead. [1, 6]  \n• Document Database: It stores data in flexible, JSON-like documents, making it suitable for various use cases like content management, social media applications, and user profiles. [7, 9, 10]  \n• Built-in Security: Amazon DocumentDB provides encryption at rest and in transit, as well as role-based access control. [1, 11, 12, 13, 14]  \n• Monitoring and Analytics: It integrates with Amazon CloudWatch for monitoring and provides various metrics for performance analysis. [1, 15]  \n• Cost Optimization: You only pay for the storage and compute resources you use, and Amazon DocumentDB offers various pricing options. [11]  \n\nUse Cases: \n\n• Content Management: Storing and retrieving content, including rich text, images, and other structured data. [9, 16, 17, 18]  \n• Social Media Applications: Managing user profiles, posts, and feeds. [6, 9, 19, 20]  \n• Online Retail: Storing product catalogs, user preferences, and order information. [9, 21, 22]  \n• IoT Applications: Handling sensor data, device logs, and real-time analytics. [9, 23, 24, 25]  \n• Gaming: Managing game data, player profiles, and game settings. [9, 26, 27]  \n\nHow it Works: \n\n• Clusters: Amazon DocumentDB uses clusters, which are collections of database instances and a cluster volume that manages the data. [28]  \n• Instances: Instances provide the processing power for the database, writing data to and reading data from the cluster storage volume. [28]  \n• Storage: The cluster volume replicates data across multiple Availability Zones for high availability and durability. [28]  \n• Scaling: You can scale compute and storage independently to match your workload needs. [7]  \n• Failover: In case of instance failure, Amazon DocumentDB automatically fails over to a replica instance in another Availability Zone. [1]  \n\nAI responses may include mistakes.\n\n[1] https://docs.aws.amazon.com/documentdb/latest/developerguide/what-is.html[2] https://docs.aws.amazon.com/govcloud-us/latest/UserGuide/govcloud-dcdb.html[3] https://docs.aws.amazon.com/documentdb/latest/developerguide/functional-differences.html[4] https://n2ws.com/blog/aws-cloud/amazon-documentdb[5] https://docs.localstack.cloud/user-guide/aws/docdb/[6] https://www.youtube.com/watch?v=PsHXnWBUU-g[7] https://aws.amazon.com/documentdb/[8] https://www.youtube.com/watch?v=7sG_W2_5Io4[9] https://docs.aws.amazon.com/documentdb/latest/developerguide/document-database-use-cases.html[10] https://n2ws.com/blog/aws-cloud/amazon-documentdb[11] https://aws.amazon.com/documentdb/pricing/[12] https://aws.amazon.com/documentdb/faqs/[13] https://docs.aws.amazon.com/documentdb/latest/developerguide/what-is-document-db.html[14] https://www.amazonaws.cn/en/documentdb/features/[15] https://aws.amazon.com/documentdb/features/[16] https://help.qlik.com/talend/en-US/components/8.0/amazon-documentdb/amazon-documentdb-component[17] https://www.projectpro.io/article/aws-documentdb/911[18] https://www.influxdata.com/document-database/[19] https://www.youtube.com/watch?v=VjiuOxpaQ7A[20] https://n2ws.com/blog/aws-cloud/amazon-documentdb[21] https://n2ws.com/blog/aws-cloud/amazon-documentdb[22] https://vitiya99.medium.com/taming-your-data-with-aws-documentdb-a-deep-dive-930554cb2840[23] https://n2ws.com/blog/aws-cloud/amazon-documentdb[24] https://vitiya99.medium.com/taming-your-data-with-aws-documentdb-a-deep-dive-930554cb2840[25] https://www.datadoghq.com/blog/monitor-documentdb-with-datadog/[26] https://n2ws.com/blog/aws-cloud/amazon-documentdb[27] https://bluexp.netapp.com/blog/aws-cvo-blg-aws-database-as-a-service-8-ways-to-manage-dbs-in-aws[28] https://docs.aws.amazon.com/documentdb/latest/developerguide/how-it-works.html[-] https://docs.aws.amazon.com/documentdb/latest/developerguide/how-it-works.html\n","metadata":{"filename":"DocumentDB.html"}}],["2",{"pageContent":"Amazon ElastiCache is a fully managed in-memory data store and cache service provided by AWS. It helps improve application performance by storing data in memory, making it faster to retrieve than traditional disk-based storage. ElastiCache can be used to cache frequently accessed data, reducing load on primary databases and improving overall application speed. [1, 2, 3]  \nKey Features and Benefits: \n\n• Improved Performance: ElastiCache significantly reduces latency by storing frequently accessed data in memory, resulting in faster read speeds and improved application response times. [1, 3, 4]  \n• Scalability: ElastiCache can be easily scaled up or down to meet changing application demands, allowing you to accommodate peak loads without impacting performance. [1, 5]  \n• Cost-Effectiveness: By reducing the load on primary databases and using less expensive in-memory storage, ElastiCache can help lower overall infrastructure costs. [1, 6]  \n• Managed Service: ElastiCache handles the complexities of managing a distributed cache, including provisioning, patching, backups, and monitoring, freeing up your development team to focus on building applications. [1, 6, 7]  \n• Compatibility: ElastiCache supports various popular in-memory data stores, including Memcached, Redis, and Valkey, allowing you to use familiar tools and libraries. [1, 6, 8]  \n• High Availability: ElastiCache is designed for high availability, with automatic failover and recovery mechanisms to ensure that your applications remain operational even if individual nodes fail. [5, 6]  \n\nCommon Use Cases: \n\n• Caching Database Queries: ElastiCache can be used to cache the results of frequently executed database queries, reducing the load on the database and improving application performance. [4, 9]  \n• Session Management: Storing user session data in ElastiCache can improve session management performance and reduce the need for disk-based storage. [4, 6, 9, 10]  \n• Content Caching: ElastiCache can be used to cache web content, reducing latency for users and improving application performance. [4, 9]  \n• Real-time Applications: ElastiCache can be used to power real-time applications such as social networking, gaming, and media sharing, where low latency and high throughput are essential. [4]  \n\nAI responses may include mistakes.\n\n[1] https://cloudchipr.com/blog/amazon-elasticache[2] https://docs.aws.amazon.com/AmazonElastiCache/latest/dg/WhatIs.html[3] https://www.prosperops.com/blog/what-is-elasticache/[4] https://aws.amazon.com/elasticache/features/[5] https://aws.amazon.com/awstv/watch/1bbb1def46b/[6] https://aws.amazon.com/elasticache/faqs/[7] https://docs.aws.amazon.com/AmazonElastiCache/latest/dg/WhatIs.deployment.html[8] https://aws.amazon.com/elasticache/[9] https://aws.amazon.com/elasticache/redis/[10] https://www.cloudzero.com/blog/elasticache-pricing/\nNot all images can be exported from Search.\n","metadata":{"filename":"ElastiCache.html"}}],["3",{"pageContent":"The purpose of this library is to parse fixed & non fixed length formatted data for CSV/DAT based file data to custom plain java object and vice-versa.\n\n1. With Fixed Length\nJRecordBind library is used for Fixed length.\n\n2. Without Fixed Length\nOpenCSV library is used to perform read/write operations on/for non-fixed length data (aka where column header data does not contain fixed length)\n\nThe implementation of the NonFixedWidthParser component enables reading and writing files supporting CSV/DAT formats without requiring column fixed length specifications.\n\n\n","metadata":{"filename":"FileProcessors.html"}}],["4",{"pageContent":"The logging and masking library provides an opinionated set of logging configurations alongside a masking utility.\n\nDataFieldConverter:\nThis class is a logback ClassicConverter implementation that converts data objects passed as arguments to log messages into JSON format. It uses ObjectMapper to convert java objects to JSON.\n\nErrorCodeConverter:\nThe ErrorCodeConverter is a custom Logback converter designed to extract error codes from log events that occur at the ERROR level. This converter helps in logging error-specific codes from various exception types, making it easier to identify and diagnose issues in production systems. With the integration of the ErrorCodeConverter, log entries will now include a new field for \"errorCode\", providing enhanced clarity and facilitating more effective error tracking.\n\nExtracts Error Codes: Retrieves error codes from a variety of exception types, including custom exceptions and custom Error objects.\nSupports Multiple Sources: The converter checks both the arguments passed to the log and the throwable (exception) associated with the log to extract the error code.\nSupported Exception Types:\nCustom Exceptions: Any exception extending the BaseException class, including:\n\nAuthenticationException\nBadRequestException\nDataNotFoundException\nEAPIUnavailableException\nForbiddenException\nIntegrationException\nInvalidInputException\nSystemException\nUnprocessableEntityException\nVersionConflictException\nBaseException\nCustom Error Object\n\nCustom error objects, such as the Error object from the com.marriott.platform.framework.model.Error package.\nLogback\nContains default patterns for how the logs will be formed when logged\nBy default, root level logging is set to INFO means it will log messages with a severity level of INFO and above.\nThis can be overridden by using Spring Boot's logging configuration\nUses \"MaskingJsonGeneratorDecorator\" provided by Logstash Logback encoder library to mask sensitive data in logs.\nCustom implementation of \"FieldMasker\" to prevent the masking of null values which can be configured by providing the property logback.mask.disable.null-masking in application.properties/application.yml file.\nThe authorization key, which is specified as a header upon logging in, has been identified for masking by inclusion in a predefined masking pathway.","metadata":{"filename":"Logging&Masking.html"}}],["5",{"pageContent":"PostgreSQL has become the preferred open source relational database for many enterprise developers and startups, powering leading business and mobile applications. Amazon RDS makes it easier to set up, operate, and scale PostgreSQL deployments on the cloud. With Amazon RDS, you can deploy scalable PostgreSQL deployments in minutes with cost-efficient and resizable hardware capacity. Amazon RDS manages complex and time-consuming administrative tasks such as PostgreSQL software installation and upgrades, storage management, replication for high availability and read throughput, and backups for disaster recovery.\n\nAmazon RDS for PostgreSQL gives you access to the capabilities of the familiar PostgreSQL database engine. This means that the code, applications, and tools you already use today with your existing databases can be used with Amazon RDS. Amazon RDS for PostgreSQL currently supports PostgreSQL 11, 12, 13, 14, 15,  16, and 17. With Trusted Language Extensions (TLE) for PostgreSQL, you can build high performance extensions and safely run them on Amazon RDS using popular trusted languages without needing AWS to certify code.\nEasier, managed deployments\nFast, predictable storage\nBackup and recovery\nHigh availability and read replicas\nIsolation and security\n","metadata":{"filename":"Postgres.html"}}],["6",{"pageContent":"Spring Boot is an open-source Java-based framework used to build microservices and web applications. It simplifies the development process by providing auto-configuration and embedded servers, reducing the need for manual configuration. Spring Boot builds on top of the Spring Framework, offering features like dependency injection and specialized components, making it easier to create stand-alone, production-ready applications. It is particularly useful for developing web applications and microservices quickly and efficiently. [1]  \n\nAI responses may include mistakes.\n\n[1] https://www.youtube.com/watch?v=9SGDpanrc8U\n","metadata":{"filename":"Springboot.html"}}]]